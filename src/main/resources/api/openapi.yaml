openapi: 3.0.1
info:
  title: Hack4Law
  description: Operations defined for hack4law
  contact:
    name: Piotr Krawiecki
    email: piotr.krawiecki@pl.ey.com
  version: "1.0"
tags:
  - name: CreateCase
    description: 'Create case'
  - name: QueryCase
    description: 'Query cases'
  - name: QueryUser
    description: 'Query user'
paths:
  /api/assistant/cases/createCaseDefinition:
    post:
      tags:
        - CreateCase
      operationId: createCaseDefinition
      summary: 'Create Case'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseDefinitionDto'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseDefinitionDto'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/assistant/cases/createCase:
    post:
      tags:
        - CreateCase
      operationId: createCase
      summary: 'Create Case'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseDto'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponseDto'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/assistant/cases/findAllCaseDefinitions:
    get:
      tags:
        - QueryCase
      operationId: findAllCaseDefinitions
      summary: 'Receive all case definitions'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseDefinitionDtoList'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/assistant/cases/{caseId}:
    get:
      tags:
        - QueryCase
      operationId: findCaseById
      summary: 'Receive case by id'
      parameters:
        - in: path
          name: caseId
          schema:
            type: integer
          required: true
          description: 'case id to retrieve'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponseDto'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/assistant/cases/findAllCases:
    get:
      tags:
        - QueryCase
      operationId: findAllCases
      summary: 'Receive all cases'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponseDtoList'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/assistant/users/findAllUsers:
    get:
      tags:
        - QueryUser
      operationId: findAllUsers
      summary: 'Receive all users'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDtoList'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /api/assistant/cases/updateById/{caseId}:
    put:
      tags:
        - CreateCase
      operationId: updateCaseById
      summary: 'Update case by id'
      parameters:
        - in: path
          name: caseId
          schema:
            type: integer
          required: true
          description: 'case id to update'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseDto'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponseDto'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

components:
  schemas:
    CaseDtoList:
      type: array
      items:
        $ref: '#/components/schemas/CaseDto'
    CaseDto:
      type: object
      properties:
        id:
          type: integer
        caseDefinitionId:
          type: integer
        caseTaskDtoList:
          $ref: '#/components/schemas/CaseTaskDtoList'
        caseNumber:
          type: string
        description:
          type: string
        receiptDate:
          type: string
          format: date
        deadlineDate:
          type: string
          format: date
        finishDate:
          type: string
          format: date
        caseStatus:
          $ref: '#/components/schemas/CaseStatus'
        assignedUser:
          type: string
        helpingUser:
          type: string
        notesList:
          $ref: '#/components/schemas/NoteDtoList'
        filesList:
          $ref: '#/components/schemas/FileDtoList'
    CaseStatus:
      enum:
        - NIEZACZETA
        - W_TOKU
        - OCZEKUJE_NA_INNY_ORGAN
        - ODRZUCONA
        - ZAKONCZONA
        - ZAAKCEPTOWANA
        - DO_AKCEPTACJI
        - NOWA
    TaskStatus:
      enum:
        - NOWY
        - W_TRAKCIE
        - ZAKONCZONY
        - ODRZUCONY

    CaseResponseDtoList:
      type: array
      items:
        $ref: '#/components/schemas/CaseResponseDto'
    CaseResponseDto:
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        caseType:
          type: string
        name:
          type: string
        caseTaskDtoList:
          $ref: '#/components/schemas/CaseTaskResponseDtoList'
        caseNumber:
          type: string
        description:
          type: string
        receiptDate:
          type: string
          format: date
        deadlineDate:
          type: string
          format: date
        finishDate:
          type: string
          format: date
        caseStatus:
          $ref: '#/components/schemas/CaseStatus'
        assignedUser:
          type: string
        helpingUser:
          type: string
        notesList:
          $ref: '#/components/schemas/NoteDtoList'
        filesList:
          $ref: '#/components/schemas/FileDtoList'

    CaseTaskResponseDtoList:
      type: array
      items:
        $ref: '#/components/schemas/CaseTaskResponseDto'
    CaseTaskResponseDto:
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        name:
          type: string
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'

    CaseTaskDtoList:
      type: array
      items:
        $ref: '#/components/schemas/CaseTaskDto'
    CaseTaskDto:
      type: object
      properties:
        caseDefinitionId:
          type: integer
        caseStepDefinitionId:
          type: integer
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
    NoteDtoList:
      type: array
      items:
        $ref: '#/components/schemas/NoteDto'
    NoteDto:
      type: object
      properties:
        comment:
          type: string
    FileDtoList:
      type: array
      items:
        $ref: '#/components/schemas/FileDto'
    FileDto:
      type: object
      properties:
        fileLink:
          type: string
        fileDescription:
          type: string
        fileData:
          type: string
        fileType:
          $ref: '#/components/schemas/FileType'
    FileType:
      enum:
        - DOKUMENT
        - AKTA_SPRAWY
        - SKAN
        - INNY
    UserDtoList:
      type: array
      items:
        $ref: '#/components/schemas/UserDto'
    UserDto:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        userRole:
          $ref: '#/components/schemas/UserRole'
    UserRole:
      enum:
        - SEDZIA
        - RADCA
        - PRAWNIK
        - ADWOKAT
        - PRACOWNIK_KANCELARII
        - MANAGER
        - SPECJALISTA
    CaseDefinitionDtoList:
      type: array
      items:
        $ref: '#/components/schemas/CaseDefinitionDto'
    CaseDefinitionDto:
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        caseType:
          type: string
        name:
          type: string
        caseStepDefinitionDtoList:
          $ref: '#/components/schemas/CaseStepDefinitionDtoList'
    CaseStepDefinitionDtoList:
      type: array
      items:
        $ref: '#/components/schemas/CaseStepDefinitionDto'
    CaseStepDefinitionDto:
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        name:
          type: string
    ErrorMessage:
      type: object
      properties:
        errorCode:
          type: string
        errorMsg:
          type: string
        errorDetails:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
